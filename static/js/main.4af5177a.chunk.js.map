{"version":3,"sources":["components/Climate.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Climate","defaultOptions","loop","autoplay","animationData","this","props","rendererSettings","preserveAspectRatio","className","options","Component","Form","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","main","description","error","API_KEY","App","state","undefined","animationDatas","e","a","async","preventDefault","target","elements","value","fetch","api_call","json","data","setState","temp","sys","weather","animationDataSunny","animationDataRainy","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4af5177a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Lottie from 'react-lottie'\r\n// import animationData1 from '../assets/climate/data.json'\r\n\r\nclass Climate extends Component {\r\n  render(){\r\n   \r\n\r\n    const defaultOptions = {\r\n      loop: true,\r\n      autoplay: true, \r\n      animationData:this.props.animationData,\r\n      rendererSettings: {\r\n        preserveAspectRatio: 'xMidYMid slice'\r\n      }\r\n      \r\n    };\r\n\r\n    return(\r\n      <div className=\"controlled\">\r\n        <Lottie options={defaultOptions}\r\n              // height=100%\r\n              // width={400}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Climate","import React from \"react\";\r\n\r\nconst Form = props => (\r\n\t<form onSubmit={props.getWeather}>\r\n\t\t<input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n\t\t<input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n\t\t<button>Get Weather</button>\r\n\t</form>\r\n);\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather__info\">\r\n\t {\t\r\n\t \tprops.city && props.country && <p className=\"weather__key\"> Location: \r\n\t \t\t<span className=\"weather__value\"> { props.city }, { props.country }</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.temperature && <p className=\"weather__key\"> Temperature: \r\n\t \t\t<span className=\"weather__value\"> { props.temperature }\t</span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.humidity && <p className=\"weather__key\"> Humidity: \r\n\t \t\t<span className=\"weather__value\"> { props.humidity } </span>\r\n\t \t</p> \r\n\t }\r\n\t { \t\r\n\t \tprops.main && <p className=\"weather__key\"> Climate: \r\n\t \t\t<span className=\"weather__value\"> { props.main } </span>\r\n\t </p> \r\n\t }\r\n\t { \t\r\n\t \tprops.description && <p className=\"weather__key\"> Conditions: \r\n\t \t\t<span className=\"weather__value\"> { props.description } </span>\r\n\t </p> \r\n\t }\r\n\t { \r\n\t \tprops.error && <p className=\"weather__error\">{ props.error }</p>  \r\n\t }\r\n\t</div>\r\n);\r\n\r\nexport default Weather;","import React from \"react\";\r\n// import Titles from \"./components/Titles\";\r\nimport Climate from \"./components/Climate\";\r\nimport Form from \"./components/Form\";\r\nimport Weather from \"./components/Weather\";  \r\nimport animationDataSunny from './assets/climate/sunny.json'\r\nimport animationDataRainy from './assets/climate/rain.json'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css'\r\n// n\r\nconst API_KEY = \"93a7e886a7ff1e5ab98f1c8be67a42ec\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    temperature: undefined,\r\n    city: undefined,\r\n    country: undefined,\r\n    humidity: undefined,\r\n    main: undefined,\r\n    description: undefined,\r\n    error: undefined,\r\n    animationDatas:undefined\r\n  }\r\n  getWeather = async (e) => {\r\n    e.preventDefault();\r\n    const city = e.target.elements.city.value;\r\n    const country = e.target.elements.country.value;\r\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\r\n    const data = await api_call.json();\r\n    if (city && country) {\r\n      this.setState({\r\n        temperature: data.main.temp,\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        humidity: data.main.humidity,\r\n        main: data.weather[0].main,\r\n        description: data.weather[0].description,\r\n        error: \"\"\r\n      });\r\n    } else {\r\n      this.setState({\r\n        temperature: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        humidity: undefined,\r\n        description: undefined,\r\n        main:undefined,\r\n        error: \"Please enter the values.\"\r\n      });\r\n    }\r\n    if(this.state.main===\"Clear\"){\r\n      this.setState({\r\n        animationDatas:animationDataSunny\r\n      });\r\n    }\r\n    else if(this.state.main===\"Clouds\"){\r\n      this.setState({\r\n        animationDatas:animationDataSunny\r\n      });\r\n    }\r\n    else if(this.state.main===\"Rain\"){\r\n      this.setState({\r\n        animationDatas:animationDataRainy\r\n      });\r\n    }\r\n    else{\r\n      this.setState({\r\n        animationDatas:0\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        \r\n          <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-lg-7 title-container\">\r\n                    <Climate animationData={this.state.animationDatas}/> \r\n                    {/* <Titles /> */}\r\n                </div>\r\n                <div className=\"col-lg-5 form-container\">\r\n                  <Form getWeather={this.getWeather} />\r\n                  <Weather \r\n                    temperature={this.state.temperature} \r\n                    humidity={this.state.humidity}\r\n                    city={this.state.city}\r\n                    main={this.state.main}\r\n                    country={this.state.country}\r\n                    description={this.state.description}\r\n                    error={this.state.error}\r\n                  />\r\n                </div>\r\n              </div>\r\n          </div>\r\n      </div>\r\n        \r\n    );\r\n  }\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}